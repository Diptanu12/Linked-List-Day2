Add two numbers represented by linked lists
Given two numbers represented by two linked lists of size N and M. The task is to return a sum list.

The sum list is a linked list representation of the addition of two input numbers from the last.

Input Format
The first line inputs N and M ,the size of two linked lists.

The second line inputs the value of N nodes of 1st linked list.

The third line inputs the value of M nodes of 2nd linked list.

Output Format
Print the sum list.

Example 1
Input

2 3
4 5 
3 4 5
Output

3 9 0
Explaination

For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).
Example 2
Input

3 3
5 4 1 
7 2 5
Output

1 2 6 6 
Explaination

For the given two linked
list (5 4 1) and (7 2 5, after adding
the two linked list resultant linked
list will be (1 2 6 6 ).
Constraints:
1 <= N, M <= 5000

0<= |value of each node| <=9

Topics
Linked lists


import java.util.*;
import java.io.*;
class Node{
    int data;
    Node next;
    Node(int data){
        this.data = data;
        next = null;
    }
}
class LinkedList{
    Node head;
    void add(int data){
        Node new_node = new Node(data);
        if(head == null){
            head = new_node;
            return;
        }
        Node curr = head;
        while(curr.next != null)
            curr = curr.next;
        curr.next = new_node;
    }
}
public class Main {
    public static Node reverse(Node node){
        Node prev = null;
        Node curr = node;
        Node next = null;
        while(curr != null){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        node = prev;
        return node;
    }
    
public static void combine(Node a, Node b, LinkedList ans){

     int carry = 0;

    while (a != null || b != null) {
        int sum = carry;

        if (a != null) {
            sum += a.data;
            a = a.next;
        }

        if (b != null) {
            sum += b.data;
            b = b.next;
        }

    
        carry = sum / 10;


        ans.add(sum % 10);
    }

    if (carry > 0) {
        ans.add(carry);

    }
}
    public static void main(String args[]) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int m = input.nextInt();
        LinkedList a = new LinkedList();
        LinkedList b = new LinkedList();
        for(int i = 0; i < n; i++){
            a.add(input.nextInt());
        }
        for(int i = 0; i < m; i++){
            b.add(input.nextInt());
        }
        a.head = reverse(a.head);
        b.head = reverse(b.head);
        LinkedList ans = new LinkedList();
        combine(a.head, b.head, ans);
        ans.head = reverse(ans.head);
        Node h = ans.head;
        while(h != null){
            System.out.print(h.data + " ");
            h = h.next;
        }
        System.out.println("");
    }
}
